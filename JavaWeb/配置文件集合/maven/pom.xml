<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.rosydawn</groupId>
    <artifactId>case</artifactId>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>My Maven Webapp</name>
    <url>http://maven.apache.org</url>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <!-- The last version of TestNG supporting JDK 1.5 and 1.6 is 6.8.21.
        The last version of TestNG supporting JDK 1.7 is -->
        <testng.version>6.8.21</testng.version>

        <!-- Junit 4.xx 使用了注解、泛型和静态导入等特性，所以至少需要 JDK 1.5+ 的支持。而Junit 3.xx 需要 JDK 1.2+ 支持。
        Junit 绑定了一个 hamcrest-core 1.3 的包，但不建议使它，最好排除这个jar包，而是使用 hamcrest-library 1.3的jar包-->
        <junit.version>4.12</junit.version>
        <hamcrest.version>1.3</hamcrest.version>

        <!-- mockito 2 需要 JDK 1.6+ 支持，它可以自动检测到 JDK 8 并使用其新特性 -->
        <mockito.version>2.8.9</mockito.version>

        <!-- powermock-module-junit4 1.7.x artifact depends on junit4 4.4+ -->
        <powermock-module-junit4.version>1.7.4</powermock-module-junit4.version>

        <!-- powermock-module-testng 1.6.4 artifact depends on testng 6.8.21，1.6.5+ depends on testng 6.9.10。 -->
        <powermock-module-testng.version>1.6.4</powermock-module-testng.version>

        <!--每个版本的 mockito 都有对应的 powermock，详情请参考：https://github.com/powermock/powermock/wiki/Mockito-->
        <!-- powermock-api-mockito2 1.7.x artifact depends on mockito2 2.8.0-2.8.9 -->
        <powermock-api-mockito2.version>1.6.4</powermock-api-mockito2.version>

        <!-- spring-webmvc包依赖于spring-beans、spring-web、spring-core、spring-aop、spring-context、
        spring-tx、spring-expression、spring-oxm 、spring-context-support-->
        <spring.version>4.3.23.RELEASE</spring.version>
        <spring-data-commons.version>1.13.14.RELEASE</spring-data-commons.version>
        <spring-data-jpa.version>1.11.14.RELEASE</spring-data-jpa.version>
        <spring-data-redis.version>1.8.14.RELEASE</spring-data-redis.version>
        <!-- Spring Security 5.0.4.RELEASE针对Spring Framework 5.0.5.RELEASE构建，
        Spring Security 4.2.5.RELEASE针对Spring Framework 4.3.12.RELEASE构建，
        但Spring Security 5.x和4.x应该可以与Spring Framework4.0.x一起使用。 -->
        <spring-security.version>4.2.5.RELEASE</spring-security.version>
        <shiro.version>1.3.2</shiro.version>
        <!-- As of Spring 4.0, Spring requires Hessian 4.0 or above. -->
        <hessian.version>4.0.38</hessian.version>

        <!-- hibernate-validator 6.0 需要  JDK 1.8+ 和 Bean Validation 2.0，hibernate-validator 5.4 需要  JDK 1.6+ 和 Bean Validation 1.1 -->
        <hibernate-validator.version>5.4.1.Final</hibernate-validator.version>
        <!-- mysql-connector-java 5.1 可以运行在 JRE 1.5.x、1.6.x、1.7.x* 和 1.8.x** 上。
        详见：https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-versions.html 。-->
        <mysql-connector-java.version>5.1.42</mysql-connector-java.version>
        <!-- Oracle 数据库驱动。由于 Oracle 版权限制，需要去官网下载驱动，然后手动 install 再添加-->
        <ojdbc6.version>11.2.0.1</ojdbc6.version>
        <druid.version>1.1.10</druid.version>
        <!--DBCP 2 仅在 Java 7 上编译和运行(JDBC 4.1)。DBCP 1.4 仅在 Java 6 上编译和运行(JDBC 4)。
        commons-dbcp2 包依赖于 commons-pool2 包，commons-dbcp 包依赖于 commons-pool 包。-->
        <commons-dbcp2.version>2.1.1</commons-dbcp2.version>
        <commons-dbcp.version>1.4</commons-dbcp.version>
        <!--HttpClient 4.4.x 和 4.5.x 需要 Java 1.6+，HttpClient 5.x.x 需要 Java 1.7+ -->
        <httpclient.version>4.5.2</httpclient.version>
        <!-- c3p0 0.9.5 可以在 Java 6 上运行。而后续的 c3p0 0.9.6 需要 Java 7 才能运行。-->
        <c3p0.version>0.9.5.2</c3p0.version>
        <!-- mybatis 自 3.2 开始需要 JDK 1.6 及以上， mybatis 3.4 也可以运行在 JDK 6、7、8 上，MyBatis 3.5.0 requires Java 8 and later -->
        <mybatis.version>3.4.1</mybatis.version>
        <!-- mybatis-spring 1.3.0+ 的环境要求为 MyBatis 3.4+、Spring 3.2.2+、Spring Batch 2.1+、Java 6+ -->
		<!-- mybatis-spring 2.0+ 的环境要求为 MyBatis 3.5+、Spring 5.0+、Spring Batch 4.0+、Java 8+ -->
        <mybatis-spring.version>1.3.0</mybatis-spring.version>
        <!-- Hibernate 5.2 需要 JDK 1.8+ ，Hibernate 5.1、5.0 和 4.3 需要 JDK 1.6+。Hibernate 4.3~5.2 需要 JPA 2.1+。
        Spring 从 4.0 开始要求 Hibernate 版本必需为 3.6 或更高版本。由于Hibernate 3 和 4 已不再更新，
        Spring 4 推荐使用 Hibernate 5.x-->
        <hibernate-core.version>5.1.13.Final</hibernate-core.version>

        <!-- servlet 3.x.x api -->
        <!--<javax.servlet-api.version>3.1.0</javax.servlet-api.version>-->
        <javax.servlet-api.version>3.0.1</javax.servlet-api.version>
        <!-- servlet 2.5 api -->
        <servlet-api.version>2.5</servlet-api.version>
        <!-- jsp-api -->
        <jsp-api.version>2.2</jsp-api.version>
		<!-- freemarker 2.3.21 needs JDK 1.4+ -->
		<freemarker.version>2.3.28</freemarker.version>
        <!-- jstl 标签库 -->
        <jstl.version>1.2</jstl.version>

        <!--Log4j2 进行日志打印。Log4j 2 用于 web 项目时需要 Servlet 3.0+。log4j-web 包依赖于 log4j-api 和 log4j-core 两个包。
        Log4j 2.4 及以上版本需要 1.7 及以上的 JDK，Log4j 2.0-alpha1 到 2.3 版本需要 1.6 及以上的 JDK。-->
        <log4j2.version>2.13.3</log4j2.version>
        <log4j.version>1.2.17</log4j.version>

        <!-- 某些框架仅包含了slf4j-api的简单抽象，故需要添加slf4j binding才行。
        可使用log4j-slf4j-impl、slf4j-log4j12、slf4j-jdk14、slf4j-nop、slf4j-simple、slf4j-jcl等binding。
        这些binding也需要对应的实现，如 slf4j-log4j12 需要 classpath 下存在 log4j 才行。-->
        <!-- log4j-slf4j-impl 的版本与 log4j2 的版本相同。
        log4j-slf4j-impl 从 2.0 版本开始依赖的 slf4j 版本为 1.7.7，从 2.3 开始依赖的 slf4j 版本为 1.7.12，
        从 2.6 开始依赖的 slf4j 版本为 1.7.21，从 2.9.0 开始依赖的 slf4j 版本为 1.7.25-->
        <log4j-slf4j-impl.version>2.3</log4j-slf4j-impl.version>
        <!-- slf4j-log4j12 依赖于 sl4j-api 和 log4j。slf4j-log4j12 版本和 sl4j-api 版本相同。
        slf4j-log4j12 从 1.6.1 版本开始依赖的 log4j 版本为 1.2.16，从 1.6.5 开始依赖的 log4j 版本为 1.2.17 -->
        <slf4j-log4j12.version>1.7.25</slf4j-log4j12.version>
        <!-- slf4j-simple 的版本和 sl4j-api 版本相同 -->
        <slf4j-simple.version>1.7.25</slf4j-simple.version>

        <!-- dom4j 1.6.1基于JDK 1.4编译，自2006年到现在（201805）还未更新过。 -->
        <dom4j.version>1.6.1</dom4j.version>

        <!-- commons 提供的 java.lang API 的功能增加包，包括字符串、数值、反射、并发、序列化以及系统属性操作等功能的增强。
        commons-lang 3.5 开始要求 JDK 1.6+，commons-lang 3.6 要求 JDK 1.7+ -->
        <commons-lang3.version>3.5</commons-lang3.version>
        <!-- Apache Commons FileUpload 1.3.3 (requires Java 1.5 or later) -->
        <commons-fileupload.version>1.3.3</commons-fileupload.version>
        <!-- Apache Commons Codec 主要用于编码格式转换，主要用于 Base64、二进制、十六进制、字符集和 Url 编码转换。
            甚至也支持语音编码转换。 Codec 1.6~1.11 需要 JDK 1.6。-->
        <commons-codec.version>1.10</commons-codec.version>
        <!--bcprov-jdk15on.jar 包提供了加密增强的支持。1.59 版本支持 JDK1.5~JDK1.8-->
        <bcprov-jdk15on.version>1.59</bcprov-jdk15on.version>

        <!-- Json 数据转换。
        jackson-databind 包是 spring-webmvc 包的可选依赖，该包还依赖于 jackson-core 包和 jackson-annotations 包。
        从 jackson 2.4 开始需要 JDK 1.6+，从 jackson 2.7 开始, JDK 的基线为 1.7，但并没有全部使用 JDK 1.7 的新特性，所以
        jackson 2.7 应该可以用于 JDK 1.6，但从 jackson 2.8 开始，JDK 1.7+ 是必须的。 -->
        <jackson.version>2.6.7</jackson.version>
        <!-- fastjson 1.2.44 needs JDK 6.0+ -->
        <fastjson.version>1.2.44</fastjson.version>

        <!-- 使用Quartz框架的定时任务功能。Quartz 2.x 版本需要 JDK 1.6+ 支持， Quartz 1.x 版本只有一个jar包，需要 JDK 1.4+ 支持 。
        建议使用 2.x 版本（1.x 版本功能有限且与难用，除非是古董级的项目） -->
        <quartz.version>2.2.1</quartz.version>

        <!-- javax.mail-api 1.6.x 需要 JDK 1.7＋，javax.mail-api 1.5.x 需要 JDK 1.5+ -->
        <javax.mail.version>1.5.6</javax.mail.version>
        <!-- commons-email基于JavaMail，目的是简化JavaMail的操作。commons-email各版本对JDK版本的要求同JavaMail API。-->
        <commons-email.version>1.5</commons-email.version>
        <!-- java mail test suite of email servers.
        greenmail 1.5.x requires JDK 1.7+ and JavaMail 1.5+, greenmail 1.4.x requires JDK 1.6+ and JavaMail 1.5+ -->
        <greenmail.version>1.4.1</greenmail.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.hamcrest</groupId>
                    <artifactId>hamcrest-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>${hamcrest.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- powermock-module-testng 1.7.x artifact depends on testng 6.9.10-->
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-testng</artifactId>
            <version>${powermock-module-testng.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- powermock-api-mockito2 1.7.x artifact depends on mockito2 2.8.9 -->
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito2</artifactId>
            <version>${powermock-api-mockito2.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- powermock-module-junit4 1.7.x artifact depends on junit4 4.4+ -->
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <version>${powermock-module-junit4.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>3.1</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-instrument</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- spring-orm 包依赖于spring-jdbc、spring-tx、spring-core 和 spring-beans-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>


        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-commons</artifactId>
            <version>${spring-data-commons.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
            <version>${spring-data-jpa.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-redis</artifactId>
            <version>${spring-data-redis.version}</version>
        </dependency>

        <!-- spring-security相关包 -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-taglibs</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-ldap</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <version>${spring-security.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- shiro 相关包 -->
        <!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-core -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-core</artifactId>
            <version>${shiro.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-web -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-web</artifactId>
            <version>${shiro.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>${shiro.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-ehcache -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-ehcache</artifactId>
            <version>${shiro.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-cas -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-cas</artifactId>
            <version>${shiro.version}</version>
        </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${hibernate-validator.version}</version>
        </dependency>

        <dependency>
            <groupId>com.caucho</groupId>
            <artifactId>hessian</artifactId>
            <version>${hessian.version}</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql-connector-java.version}</version>
        </dependency>
        <dependency>
            <groupId>com.oracle</groupId>
            <artifactId>ojdbc6</artifactId>
            <version>${ojdbc6.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>${druid.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <version>${commons-dbcp2.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
            <version>${commons-dbcp.version}</version>
        </dependency>
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>${c3p0.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>${mybatis-spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate-core.version}</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>${javax.servlet-api.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>${servlet-api.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>${jsp-api.version}</version>
        </dependency>
		<dependency>
			<groupId>org.freemarker</groupId>
			<artifactId>freemarker</artifactId>
			<version>${freemarker.version}</version>
		</dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>${jstl.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl -->
        <!-- The Apache Log4j SLF4J API binding to Log4j 2 Core -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j-slf4j-impl.version}</version>
        </dependency>
        <!-- Apache Log4j 2 -->
        <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-web -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-web</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j2.version}</version>
        </dependency>

        <!-- SLF4J LOG4J-12 Binding -->
        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j-log4j12.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Apache Log4j 1.2 -->
        <!-- https://mvnrepository.com/artifact/log4j/log4j -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-simple -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4j-simple.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>dom4j</groupId>
            <artifactId>dom4j</artifactId>
            <version>${dom4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>${httpclient.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>${commons-fileupload.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons-lang3.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${commons-codec.version}</version>
        </dependency>
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk15on</artifactId>
            <version>${bcprov-jdk15on.version}</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>

        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <version>${quartz.version}</version>
        </dependency>
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz-jobs</artifactId>
            <version>${quartz.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/javax.mail/javax.mail-api -->
        <dependency>
            <groupId>com.sun.mail</groupId>
            <artifactId>javax.mail</artifactId>
            <version>${javax.mail.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-email -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-email</artifactId>
            <version>${commons-email.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.icegreen/greenmail -->
        <dependency>
            <groupId>com.icegreen</groupId>
            <artifactId>greenmail</artifactId>
            <version>${greenmail.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- maven核心插件 -->
            <!-- maven-clean-plugin插件负责删除编译生成的target目录 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
            <!-- maven-resources-plugin负责处理资源文件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.2</version>
                <!-- 如果通过project.build.sourceEncoding属性显式指定了编码格式，那么该插件将自动使用该属性所设置的编码格式。
                当然，该插件也可以通过以下配置显式改变编码格式 -->
                <configuration>
                    <!-- 默认值为${project.build.sourceEncoding}，如果parent模块中已声明相关属性就这里不用设置了 -->
                    <encoding>UTF-8</encoding>
                    <!-- 指定不进行属性替换属性的资源文件 -->
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>pdf</nonFilteredFileExtension>
                        <nonFilteredFileExtension>swf</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>
            <!-- maven-compiler-plugin 插件负责处理编译 -->
            <!-- 此编译插件可以强制指定编译所用的JDK版本，这样就避免必须每次手动将IDE中的编译JDK版本调整到已有较高JDK版本 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <!-- 如果通过${maven.compiler.source}和${maven.compiler.target}属性指定了编译的JDK版本（3.6.x版本默
                    认为1.5），那么该插件将自动使用该属性所设置的编码格式，就不需要在插件中显示指定JDK版本了。当然，该插件也可
                    以通过以下配置显式改变编码格式 -->
                    <!-- 默认值为${maven.compiler.source}，如果parent模块中已声明相关属性就这里不用设置了 -->
                    <source>1.8</source>
                    <!-- 默认值为${maven.compiler.target}，如果parent模块中已声明相关属性就这里不用设置了 -->
                    <target>1.8</target>
                    <!-- 默认值为${project.build.sourceEncoding}，如果parent模块中已声明相关属性就这里不用设置了 -->
                    <encoding>UTF-8</encoding>
                    <!-- 指定传递给javac程序的参数 -->
                    <compilerArgs>
                        <arg>-verbose</arg>
                        <arg>-Xlint:all,-options,-path</arg>
                    </compilerArgs>
                    <!-- 指定编译的初始内存和最大内存 -->
                    <meminitial>128m</meminitial>
                    <maxmem>512m</maxmem>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.20.1</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.0.2</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>2.5.2</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.2</version>
            </plugin>
            <!-- Web应用模块打包的maven-war-plugin插件，2.6版本是可用于JDK6的最新版本 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <archive>
                        <!-- 默认打成war时不包含pom.xml -->
                        <addMavenDescriptor>false</addMavenDescriptor>
                    </archive>
                    <!-- 指定打成war时不包含的文件 -->
                    <packagingExcludes>WEB-INF/jetty-*.xml</packagingExcludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.7.1</version>
            </plugin>
            <!-- maven-source-plugin 插件用于生成源码 jar 包。 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.0</version>
                <!-- 生成源码 jar 包的相关配置。  -->
                <configuration>
                    <!-- 指定是否将源码添加到项目构件（artifact）列表中。 -->
                    <attach>false</attach>
                </configuration>
                <!-- 每个 execution 子元素表示一个任务。 -->
                <executions>
                    <!-- 将指定的插件目标绑定到指定的生命周期阶段。-->
                    <execution>
                        <!-- 指定任务的 id。 -->
                        <id>attach-sources</id>
                        <!-- 指定目标绑定的生命周期阶段为 verify（默认绑定到 package 阶段）。 -->
                        <phase>verify</phase>
                        <goals>
                            <!-- jar-no-fork 和 test-jar-no-fork 目标分别用于创建主源码包和测试源码包。 -->
                            <goal>jar-no-fork</goal>
                            <goal>test-jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- 生成javadoc文档包的插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.2</version>
                <configuration>
                    <aggregate>true</aggregate>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- maven-shade-plugin 插件可以将应用打包为超级的 uber-jar（也称为fat jar，或shaded jar）。在打包的过程中，可以
                包含依赖库、重命名依赖库的包名（以避免类库的冲突、有选择地打包。 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <!-- shade goal 默认加入到 Maven 的 package 阶段 -->
                        <goals>
                            <goal>shade</goal>
                        </goals>

                        <configuration>
                            <!-- put your configurations here -->

                            <transformers>
                                <!-- ManifestResourceTransformer 设置 MANIFEST 中的 entries -->
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <!-- 指定应用带 main() 方法的类。这样打出的包可以直接运行（main方法） -->
                                        <!--<Main-Class>${app.main.class}</Main-Class>-->
                                        <X-Compile-Source-JDK>${manifest.compile.source}</X-Compile-Source-JDK>
                                        <X-Compile-Target-JDK>${manifest.compile.target}</X-Compile-Target-JDK>
                                    </manifestEntries>
                                </transformer>

                                <!-- DontIncludeResourceTransformer 用于在打包时不包含某些文件。
                                下面的配置包含.txt文件 -->
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">
                                    <resource>.txt</resource>
                                </transformer>

                                <!-- IncludeResourceTransformer 用于在打包时包含某些文件。
                                下面的配置包含META-INF/README/README.txt-->
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                                    <resource>META-INF/README</resource>
                                    <file>README.txt</file>
                                </transformer>
                            </transformers>

                            <relocations>
                                <!-- 改变默认包名以避免冲突 -->
                                <!--<relocation>
                                    <pattern>com.app.old.jar</pattern>
                                    <shadedPattern>com.app.new.jar</shadedPattern>
                                </relocation>-->
                            </relocations>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- toolchains插件使当前Maven之前老版本JDK项目的开发。
            需要将conf目录下的toolchains.xml文件配置好后放到本地仓库的根目录下。
            可以在version元素中配置项目所用的较低的JDK版本 -->
            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-toolchains-plugin</artifactId>
                <version>1.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>toolchain</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <toolchains>
                        <jdk>

                            <version>1.6</version>
                            <vendor>sun</vendor>
                        </jdk>
                    </toolchains>
                </configuration>
            </plugin>-->

            <!--Jetty 9.x插件。You should use Maven 3.3+ for this plugin-->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.2.25.v20180606</version>
                <!--<version>9.3.24.v20180605</version>-->
                <!--<version>9.4.11.v20180605</version>-->
                <configuration>
                    <!--可选。httpConnector元素用于配置connector-->
                    <!--如果没有指定该元素，则会默认创建一个监听8080端口的ServerConnector。也可以通过标准的jetty xml配置文件
                    来设置connector，然后在jettyXml元素中引入这些配置文件-->
                    <httpConnector>
                        <!--port元素指定connector的监听端口。默认为8080-->
                        <port>8080</port>

                        <!--host元素指定connector监听的接口。默认监听所有接口-->
                        <!--<host>localhost</host>-->

                        <!--name元素指定connector名称。在配置特定connector的响应上下文时有用-->
                        <!--<name>jetty-connector</name>-->

                        <!--idleTimeout元素指定连接的最大空闲时间-->
                        <!--<idleTimeout>1800</idleTimeout>-->

                        <!--soLinger元素设置socket linger时间-->
                        <!--<soLinger>0</soLinger>-->
                    </httpConnector>

                    <!--可选。jettyXml元素指定逗号分隔的jetty xml文件列表，用于配置其他jetty信息，功能强大-->
                    <!--jetty-context.xml文件配置忽略代码校验，以免jetty启动很慢-->
                    <jettyXml>${project.basedir}/src/main/webapp/WEB-INF/jetty-context.xml</jettyXml>

                    <!--可选。scanIntervalSeconds元素设置检查是否发生变更以及如果有变更就自动热部署的时间间隔-->
                    <!-- if you save changes and recompile your class files, Jetty redeploys your webapp, and you can
                    instantly test the changes you just made-->
                    <!--默认为0，表示不进行变更检查和自动热部署-->
                    <scanIntervalSeconds>5</scanIntervalSeconds>

                    <!--可选。reload元素设置内容改变后是否自动重新加载和部署。默认为automatic，结合scanIntervalSeconds元素的非零值使用。-->
                    <!--设置为manual将忽略scanIntervalSeconds元素的设置-->
                    <!--<reload>manual</reload>-->

                    <!--可选。dumpOnStart元素设置在启动时是否清空容器（dump out the server structure）。默认为false-->
                    <!--<dumpOnStart>true</dumpOnStart>-->

                    <!--可选。loginServices元素可配置多个org.eclipse.jetty.security.LoginService实现。注意，并没有默认
                    的realm，如果你在web.xml中用到了一个realm，可以在这里指定相关的realm。也可以通过标准的jetty xml配置文件
                    来设置connector，然后在jettyXml元素中引入这些配置文件-->
                    <!--<loginServices>
                        <loginService implementation="org.eclipse.jetty.security.HashLoginService">
                            <name>Test Realm</name>
                            <config>${basedir}/src/etc/realm.properties</config>
                        </loginService>
                    </loginServices>-->

                    <!--可选。requestLog元素指定一个org.eclipse.jetty.server.RequestLog实现类。还可以有其他三种方式来配置：
                    jetty xml文件和jettyXml元素，context xml文件和contextXml元素，webApp元素-->
                    <requestLog implementation="org.eclipse.jetty.server.NCSARequestLog">
                        <filename>target/access-yyyy_mm_dd.log</filename>
                        <filenameDateFormat>yyyy_MM_dd</filenameDateFormat>
                        <logDateFormat>yyyy-MM-dd HH:mm:ss</logDateFormat>
                        <logTimeZone>GMT+8:00</logTimeZone>
                        <append>true</append>
                        <logServer>true</logServer>
                        <retainDays>120</retainDays>
                        <logCookies>true</logCookies>
                    </requestLog>

                    <!--自Jetty 9.3.1版本开始可选。配置一个org.eclipse.jetty.server.Server实例。
                    一般不用设置该元素，尤其是使用了jettyXml元素的情况下（在jetty xml中就可以配置Server）。
                    如果同时配置了两者，那么jetty xml文件将会覆盖pom.xml配置-->
                    <!--<server></server>-->

                    <!--可选。stopPort元素指定接收stop命令的端口。与jetty:stop或jetty:run-forked目标一起使用时有用-->
                    <stopPort>9966</stopPort>
                    <!--可选。stopKey元素和stopPort元素配合使用，用于指定发送到关闭端口的关闭命令的字符串，从而来验证stop命令。 -->
                    <stopKey>shutdown</stopKey>

                    <!--可选。systemProperties元素用于配置该插件运行时的系统属性-->
                    <!--<systemProperties>
                        <systemProperty>
                            <name>foo_prop</name>
                            <value>bar_value</value>
                        </systemProperty>
                    </systemProperties>-->

                    <!--可选。systemPropertiesFile指定指定一个包含该插件运行时的系统属性的文件。
                    这里设置的系统属性默认不会覆盖命令行、JVM和systemProperties元素指定的系统属性，也可以设置为强制覆盖-->
                    <!--<systemPropertiesFile></systemPropertiesFile>-->

                    <!--可选。skip元素用于设置是否执行该插件，默认为false。与在命令行设置-Djetty.skip系统属性有相同效果。
                    在集成测试中想要跳过测试时这样配置jetty很有用-->
                    <!--<skip>true</skip>-->

                    <!--默认为false。如果为true，则会将<scope>provided</scope>类型的依赖添加到容器的类路径中，一般都会使用容
                    器已经提供的依赖，所以，一般都不用配置该元素。除非容器提供的依赖达不到使用要求-->
                    <!--<useProvidedScope>true</useProvidedScope>-->

                    <!--可选。excludedGoals元素指定不执行的Jetty插件的目标列表-->
                    <!--<excludedGoals>run,run-exploded</excludedGoals>-->

                    <!--忽略代码校验，以免 Jetty 启动很慢。-->
                    <contextXml>${project.basedir}/src/main/webapp/WEB-INF/jetty-context.xml</contextXml>

                    <!-- 指定系统属性。这里配置的属性不会覆盖命令行和JVM指定的属性，仅用于补充两者配置的属性。 -->
                    <!--<systemProperties>
                        <systemProperty>
                            <name>foo_prop</name>
                            <value>bar_value</value>
                        </systemProperty>
                    </systemProperties>-->
                    <!-- 也可以选择使用属性文件类配置系统属性。这里配置的属性不会覆盖命令行、JVM和systemProperties指定的属性，
                    仅用于补充三者配置的属性。-->
                    <!--<systemPropertiesFile>${project.basedir}/my.props</systemPropertiesFile>-->

                    <webApp>
                        <!-- 设置项目的ContextPath，默认为“/${project.artifactId}”。 -->
                        <contextPath>/${project.artifactId}</contextPath>
                        <!-- Jetty提供静态资源的多个目录，用来替换baseResource元素。 -->
                        <resourceBases>
                            <resourceBase>${project.basedir}/src/main/webapp</resourceBase>
                            <!--<resourceBase>${project.basedir}/commons</resourceBase>-->
                        </resourceBases>
                        <!-- 指定一个jetty-env.xml文件的路径，在该文件中可使用JNDI。
                         确定该文件打包进classpath中，如果把该文件放在测试目录就不行。-->
                        <jettyEnvXml>${project.basedir}/src/main/webapp/WEB-INF/jetty-env.xml</jettyEnvXml>
                    </webApp>
                </configuration>
            </plugin>

            <!--Jetty 7.x or Jetty 8.x插件。You will need to use maven 3 from jetty-7.5.3 release going forwards-->
            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>8.1.16.v20140903</version>
                <configuration>
                    <!--可选。connectors元素指定一个org.eclipse.jetty.server.Connector对象（jetty的端口监听器）列表。如果没有指定，
                    则会默认在8080端口上配置一个NIO org.eclipse.jetty.server.nio.SelectChannelConnector对象。也可以在标准
                    jetty xml文件里配置connectors，然后在jettyXml元素中引用该配置文件-->
                    <connectors>
                        <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
                            <!-- 可通过命令行指令“mvn -Djetty.port=9999 jetty:run” 来设置jetty.port系统属性更改默认端口。 -->
                            <port>8080</port>
                            <maxIdleTime>60000</maxIdleTime>
                        </connector>
                        <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
                            <port>9090</port>
                            <maxIdleTime>60000</maxIdleTime>
                        </connector>
                    </connectors>

                    <!--可选。jettyXml元素指定逗号分隔的jetty xml文件列表，用于配置其他jetty信息，功能强大-->
                    <!--jetty-context.xml文件配置忽略代码校验，以免jetty启动很慢-->
                    <jettyXml>${project.basedir}/src/main/webapp/WEB-INF/jetty-context.xml</jettyXml>

                    <!--可选。scanIntervalSeconds元素设置检查是否发生变更以及如果有变更就自动热部署的时间间隔-->
                    <!-- if you save changes and recompile your class files（you can use IDE auto build function）,
                    Jetty redeploys your webapp, and instantly test the changes you just made-->
                    <!--默认为0，表示不进行变更检查和自动热部署-->
                    <scanIntervalSeconds>5</scanIntervalSeconds>

                    <!--可选。systemProperties元素用于配置该插件运行时的系统属性-->
                    <!--<systemProperties>
                        <systemProperty>
                            <name>foo_prop</name>
                            <value>bar_value</value>
                        </systemProperty>
                    </systemProperties>-->
                    <!--可选。systemPropertiesFile指定指定一个包含该插件运行时的系统属性的文件。这里设置的系统属性默认不会覆盖命令
                    行、JVM和systemProperties元素指定的系统属性，仅用于补充三者配置的属性，也可以设置为强制覆盖-->
                    <!--<systemPropertiesFile>${basedir}/my.props</systemPropertiesFile>-->

                    <!--可选。skip元素用于设置是否执行该插件，默认为false。与在命令行设置-Djetty.skip系统属性有相同效果。
                    这在集成测试中配置jetty跳过测试时很有用-->
                    <!--<skip>true</skip>-->

                    <!--可选。loginServices元素可配置多个org.eclipse.jetty.security.LoginService实现。注意，并没有默认
                    的realm，如果你在web.xml中用到了一个realm，可以在这里指定相关的realm。也可以通过标准的jetty xml配置文件
                    来设置connector，然后在jettyXml元素中引入这些配置文件-->
                    <!--<loginServices>
                        <loginService implementation="org.eclipse.jetty.security.HashLoginService">
                            <name>Test Realm</name>
                            <config>${basedir}/src/etc/realm.properties</config>
                        </loginService>
                    </loginServices>-->

                    <!--可选。requestLog元素指定一个org.eclipse.jetty.server.RequestLog实现类。还可以有其他三种方式来配置：
                    jetty xml文件和jettyXml元素，context xml文件和contextXml元素，webApp元素-->
                    <requestLog implementation="org.eclipse.jetty.server.NCSARequestLog">
                        <filename>target/access-yyyy_mm_dd.log</filename>
                        <filenameDateFormat>yyyy_MM_dd</filenameDateFormat>
                        <logDateFormat>yyyy-MM-dd HH:mm:ss</logDateFormat>
                        <logTimeZone>GMT+8:00</logTimeZone>
                        <append>true</append>
                        <logServer>true</logServer>
                        <retainDays>120</retainDays>
                        <logCookies>true</logCookies>
                    </requestLog>

                    <!--可选。stopPort元素指定接收stop命令的端口。与jetty:stop或jetty:run-forked目标一起使用时有用-->
                    <stopPort>9966</stopPort>
                    <!--可选。stopKey元素和stopPort元素配合使用，用于指定发送到关闭端口的关闭命令的字符串，从而来验证stop命令。 -->
                    <stopKey>shutdown</stopKey>

                    <!--可选。scanIntervalSeconds元素设置检查是否发生变更以及如果有变更就自动热部署的时间间隔-->
                    <!-- if you save changes and recompile your class files, Jetty redeploys your webapp, and you can
                    instantly test the changes you just made-->
                    <!--默认为0，表示不进行变更检查和自动热部署-->
                    <scanIntervalSeconds>5</scanIntervalSeconds>

                    <!--可选。reload元素设置内容改变后是否自动重新加载和部署。默认为automatic，结合scanIntervalSeconds元素的非零值使用。-->
                    <!--设置为manual将忽略scanIntervalSeconds元素的设置-->
                    <!--<reload>manual</reload>-->

                    <!--忽略代码校验，以免 Jetty 启动很慢。-->
                    <contextXml>${project.basedir}/src/main/webapp/WEB-INF/jetty-context.xml</contextXml>
                    <!--<dumpOnStart>true</dumpOnStart>-->

                    <!--可选。systemProperties元素用于配置该插件运行时的系统属性-->
                    <!--<systemProperties>
                        <systemProperty>
                            <name>foo_prop</name>
                            <value>bar_value</value>
                        </systemProperty>
                    </systemProperties>-->
                    <!--可选。systemPropertiesFile指定指定一个包含该插件运行时的系统属性的文件。这里设置的系统属性默认不会覆盖命令
                    行、JVM和systemProperties元素指定的系统属性，仅用于补充三者配置的属性，也可以设置为强制覆盖-->
                    <!--<systemPropertiesFile>${basedir}/my.props</systemPropertiesFile>-->

                    <!--Configuring Your WebApp-->
                    <!--webApp元素配置一个org.eclipse.jetty.webapp.WebAppContext的扩展，其任何setter方法都可用来配置Web应用-->
                    <webApp>
                        <!-- set the context path for your webapp，default is “/${project.artifactId}”-->
                        <contextPath>/${project.artifactId}</contextPath>

                        <!-- Optional. Location of a jetty-env.xml file, which allows you to make JNDI bindings that
                        satisfies <env-entry>, <resource-env-ref> and <resource-ref> linkages in the web.xml. Note that
                        these can also be made in a <jettyXml> file if you want them to apply to more than one webapp.
                        确保该文件打包进classpath中，如果把该文件放在测试目录就不行。-->
                        <jettyEnvXml>${project.basedir}/src/main/webapp/WEB-INF/jetty-env.xml</jettyEnvXml>

                        <!--The path to a dir that Jetty can use to expand or copy jars and jsp compiles when your
                        webapp is running. The default is ${project.build.outputDirectory}/tmp-->
                        <!--<tempDirectory>${project.build.outputDirectory}/tmp</tempDirectory>-->

                        <!--the path from which Jetty will serve static resources. Defaults to src/main/webapp.-->
                        <!--<baseResource>${project.basedir}/src/main/webapp</baseResource>-->

                        <!-- use instead of <baseResource> if you have multiple dirs from which you want to serve static
                        content. This is an array of dir names.-->
                        <resourceBases>
                            <resourceBase>${project.basedir}/src/main/webapp</resourceBase>
                            <!--<resourceBase>${project.basedir}/commons</resourceBase>-->
                        </resourceBases>

                        <!--The path to the web.xml file for your webapp-->
                        <!--<descriptor>${project.basedir}/src/main/webapp/WEB-INF/web.xml</descriptor>-->

                        <!--The path to a webdefault.xml file that will be applied to your webapp before the web.xml.
                        If none is supplied, Jetty uses a default one baked into the jetty-webapp.jar.-->
                        <!--<defaultsDescriptor></defaultsDescriptor>-->

                        <!--The path to a web.xml file that will be applied after your web.xml is read.
                        You can use this to replace or add configuration.-->
                        <!--<overrideDescriptor></overrideDescriptor>-->

                        <!--Optional. Defaults to "true". Controls whether any overlaid wars are added before or after
                        the original base resource(s) of the webapp.-->
                        <!--<baseAppFirst>true</baseAppFirst>-->

                        <!--Since jetty-8.1.x. Optional. A pattern to match against the urls of the jars on the
                        container path to select those that should be examined for things like META-INF fragments,
                        resources, tlds and class inheritance hierarchy-->
                        <!--<containerIncludeJarPattern></containerIncludeJarPattern>-->

                        <!--Since jetty-8.1.6. Optional. A pattern to match against the urls of the jars considered to
                        be on the webapp's WEB-INF classpath to select those that should be examined for META-INF
                        fragments, resources, tlds, and class inheritance hierarchy. The default is to potentially
                        examine them all, subject to any ordering exclusions configured in web.xml.-->
                        <!--<webInfIncludeJarPattern></webInfIncludeJarPattern>-->
                    </webApp>

                    <!--The location of the built WAR file(jetty:run-war) or the exploded WAR(jetty:run-exploded).
                    This defaults to ${project.build.directory}/${project.build.finalName}[.war]-->
                    <war>${basedir}/target/myApp</war>
                    <!--<war>${basedir}/target/myApp.war</war>-->

                    <!--Optional. The path to a context xml file that is applied to your webapp AFTER the <webApp>.-->
                    <!--<contextXml></contextXml>-->
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
