<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.rosydawn.myapp</groupId>
    <artifactId>myapp</artifactId>
    <version>1.1.0.RELEASE</version>
    <packaging>pom</packaging>
    <name>MyApp Root Module</name>

    <modules>
        <module>myapp-web</module>
        <module>myapp-commons</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <powermock.version>1.7.1</powermock.version>
        <mockito.version>2.10.0</mockito.version>
        <testng.version>6.14.2</testng.version>

        <log4j2.version>2.3</log4j2.version>
        <log4j-slf4j-impl.version>2.3</log4j-slf4j-impl.version>

        <httpclient.version>4.5.2</httpclient.version>
        <commons-lang3.version>3.5</commons-lang3.version>
        <commons-codec.version>1.10</commons-codec.version>
        <quartz.version>2.2.1</quartz.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.testng</groupId>
                <artifactId>testng</artifactId>
                <version>${testng.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>${mockito.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.powermock</groupId>
                <artifactId>powermock-module-testng</artifactId>
                <version>${powermock.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.powermock</groupId>
                <artifactId>powermock-api-mockito2</artifactId>
                <version>${powermock.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-slf4j-impl</artifactId>
                <version>${log4j-slf4j-impl.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-web</artifactId>
                <version>${log4j2.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>${httpclient.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons-lang3.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-codec</groupId>
                <artifactId>commons-codec</artifactId>
                <version>${commons-codec.version}</version>
            </dependency>

            <dependency>
                <groupId>org.quartz-scheduler</groupId>
                <artifactId>quartz</artifactId>
                <version>${quartz.version}</version>
            </dependency>
            <dependency>
                <groupId>org.quartz-scheduler</groupId>
                <artifactId>quartz-jobs</artifactId>
                <version>${quartz.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <!-- maven核心插件 -->
                <!-- maven-clean-plugin插件负责删除编译生成的target目录 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
                <!-- maven-resources-plugin负责处理资源文件 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.2</version>
                    <!-- 如果通过project.build.sourceEncoding属性显式指定了编码格式，那么该插件将自动使用该属性所设置的编码格式。
                    当然，该插件也可以通过以下配置显式改变编码格式 -->
                    <configuration>
						<!-- 默认值为${project.build.sourceEncoding}，如果parent模块中已声明相关属性就这里不用设置了 -->
                        <encoding>UTF-8</encoding> 
						<!-- 指定不进行属性替换属性的资源文件 -->
						<nonFilteredFileExtensions>
							<nonFilteredFileExtension>pdf</nonFilteredFileExtension>
							<nonFilteredFileExtension>swf</nonFilteredFileExtension>
							</nonFilteredFileExtensions>
                    </configuration>
                </plugin>
                <!-- maven-compiler-plugin 插件负责处理编译 -->
                <!-- 此编译插件可以强制指定编译所用的JDK版本，这样就避免必须每次手动将IDE中的编译JDK版本调整到已有较高JDK版本 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.6.0</version>
                    <configuration>
                        <!-- 如果通过${maven.compiler.source}和${maven.compiler.target}属性指定了编译的JDK版本（3.6.x版本默
                        认为1.5），那么该插件将自动使用该属性所设置的编码格式，就不需要在插件中显示指定JDK版本了。当然，该插件也可
                        以通过以下配置显式改变编码格式 -->
                        <!-- 默认值为${maven.compiler.source}，如果parent模块中已声明相关属性就这里不用设置了 -->
                        <source>1.8</source>
                        <!-- 默认值为${maven.compiler.target}，如果parent模块中已声明相关属性就这里不用设置了 -->
                        <target>1.8</target>
                        <!-- 默认值为${project.build.sourceEncoding}，如果parent模块中已声明相关属性就这里不用设置了 -->
                        <encoding>UTF-8</encoding>
						<!-- 指定传递给javac程序的参数 -->
						<compilerArgs>
							<arg>-verbose</arg>
							<arg>-Xlint:all,-options,-path</arg>
						</compilerArgs>
						<!-- 指定编译的初始内存和最大内存 -->
						<meminitial>128m</meminitial>
						<maxmem>512m</maxmem>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.20.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.7.1</version>
                </plugin>
                <!-- maven-source-plugin 插件用于生成源码 jar 包。 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.0.0</version>
                    <!-- 生成源码 jar 包的相关配置。  -->
                    <configuration>
                        <!-- 指定是否将源码添加到项目构件（artifact）列表中。 -->
                        <attach>false</attach>
                    </configuration>
                    <!-- 每个 execution 子元素表示一个任务。 -->
                    <executions>
                        <!-- 将指定的插件目标绑定到指定的生命周期阶段。-->
                        <execution>
                            <!-- 指定任务的 id。 -->
                            <id>attach-sources</id>
                            <!-- 指定目标绑定的生命周期阶段为 verify（默认绑定到 package 阶段）。 -->
                            <phase>verify</phase>
                            <goals>
                                <!-- jar-no-fork 和 test-jar-no-fork 目标分别用于创建主源码包和测试源码包。 -->
                                <goal>jar-no-fork</goal>
                                <goal>test-jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- 生成javadoc文档包的插件 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>2.10.2</version>
                    <configuration>
                        <aggregate>true</aggregate>
                    </configuration>
                    <executions>
                        <execution>
                            <id>attach-javadocs</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>