#=======================================================================================================================
# 你可以使用properties文件或YAML文件将环境变量和命令行参数来外部化配置。使用@Value注解，可以直接将这里的属性值注入到beans中，然后通过
# Spring的Environment抽象，或通过@ConfigurationProperties绑定到结构化对象来访问。
#
# 该文件或application.yml会使用${}来filter属性配置，故Maven的filter需要使用@@引入属性配置以示区别。
#=======================================================================================================================

#　如果添加了spring-boot-devtools，则默认启用该属性，显式配置该属性为false来关闭spring-boot-devtools
#spring.devtools.add-properties = false

# 定义不启用的自动化配置项的集合
#spring.autoconfigure.exclude =

# 显式指定即使变更也不需要触发重启的资源路径。默认为META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,
# templates/**,**/*Test.class,**/*Tests.class,git.properties,META-INF/build-info.properties下的资源变更不会触发重启，
# 但会触发实时加载（live reload）
#spring.devtools.restart.exclude = static/**,public/**
# 如果你想保留默认属性，并添加其他的排除规则，可以用spring.devtools.restart.additional-exclude属性作为代替
#spring.devtools.restart.additional-exclude=
# 还可以通过spring.devtools.restart.additional-paths属性来配置监控变化的额外路径
#spring.devtools.restart.additional-paths=
# 如果不喜欢重启功能，则可以使用spring.devtools.restart.enabled属性来禁用重启功能
#spring.devtools.restart.enabled=true
# 在 $HOME 文件夹下添加一个.spring-boot-devtools.properties的文件可以用来配置全局的devtools设置（注意文件名以"."开头），添加进该
# 文件的任何属性都会应用到你机器上使用该devtools的Spring Boot应用


