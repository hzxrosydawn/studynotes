#============================================================================
# Configure Datasources  
The DataSource’s “NAME” can be anything you want,
#============================================================================
# Must be the java class name of the JDBC driver for your database.
org.quartz.dataSource.NAME.driver
# The connection URL (host, port, etc.) for connection to your database.
org.quartz.dataSource.NAME.URL
org.quartz.dataSource.NAME.user
org.quartz.dataSource.NAME.password
# The maximum number of connections that the DataSource can create in it’s 
# pool of connections.It is recommended that your Datasource max connection 
# size be configured to be at least the number of worker threads in the 
# thread pool plus three.You may need additional connections if your 
# application is also making frequent calls to the scheduler API.
org.quartz.dataSource.NAME.maxConnections
# Is an optional SQL query string that the DataSource can use to detect 
# and replace failed/corrupt connections, - which is a query that should 
# never fail - unless the connection is actually bad.
org.quartz.dataSource.NAME.validationQuery = select 0 from dual


# Instantiating A Specific Scheduler From A Specific Property File
StdSchedulerFactory sf = new StdSchedulerFactory();
sf.initialize(fileName);
Scheduler scheduler = sf.getScheduler();
// Scheduler will not execute jobs until it has been started (though they can be scheduled before start())
scheduler.start();


// Placing a Scheduler in Stand-by(待命) Mode
// start() was previously invoked on the scheduler
scheduler.standby();
// now the scheduler will not fire triggers / execute jobs
// ...
scheduler.start();
// now the scheduler will fire triggers and execute jobs


# Shutting Down a Scheduler
Once you have shutdown a scheduler, it cannot be restarted (as threads and other resources are permanently destroyed). 
Also see the suspend method if you wish to simply pause the scheduler for a while.
// Wait for Executing Jobs to Finish
//shutdown() does not return until executing Jobs complete execution
scheduler.shutdown(true);

// Do Not Wait for Executing Jobs to Finish
//shutdown() returns immediately, but executing Jobs continue running to completion
scheduler.shutdown();
//or
scheduler.shutdown(false);



